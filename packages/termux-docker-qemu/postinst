#!/data/data/com.termux/files/usr/bin/bash
#
install(){
  # Create main dir
  echo "Downloading $os ISO file (It could take a while) ..."
  mkdir -p ${HOME}/.local/share/termux-docker-qemu/$os && cd $_
  # Download iso
  [[ -e $iso ]] && rm -rf $iso
  wget --tries=20 --quiet --progress=dot $ref$iso
  # Create disk (note it won't actually take 5GB of space, more like 500MB)
  echo "Creating $os image."
  [[ $os.img ]] && rm -rf $os.img
  qemu-img create -f qcow2 $os.img 5G

  if [[ $os = alpine ]]; then 
    printf "\e[33m"
    echo '''
    ____  _____    _    ____  __  __ _____
    |  _ \| ____|  / \  |  _ \|  \/  | ____|
    | |_) |  _|   / _ \ | | | | |\/| |  _|
    |  _ <| |___ / ___ \| |_| | |  | | |___
    |_| \_\_____/_/   \_\____/|_|  |_|_____|
    ::::::::::::::::::::::::::::::::::::::::'''
    echo -en "\e[0mBoot process will start, in middle of it you will login to Linux OS
    Do it as \e[31mROOT\e[0m user with \e[32mempty\e[0m password.
    Once in OS terminal run one by one the next commands:

      $ setup-interfaces
      ╰─➤# On it response at all question pressing 'enter' for default settings
      $ ifup eth0
      $ echo \"nameserver 8.8.8.8\" >> /etc/resolv.conf
      $ wget https://raw.githubusercontent.com/ivam3/termux-packages/gh-pages/packages/termux-docker-qemu/ashrc.sh -O /etc/profile.d/ashrc.sh
      $ wget https://raw.githubusercontent.com/ivam3/termux-packages/gh-pages/packages/termux-docker-qemu/answerfile.$os
      $ sed -i -E 's/(local kernel_opts)=.*/\\1=\"console=ttyS0\"/' /sbin/setup-disk
      $ setup-$os -f answerfile.$os
      ╰─➤# It will ask you to set a new password
      ╰─➤# Respond with a 'no' On question 'Setup a user? (enter a lower-case loginname, or 'no') [no]'
      ╰─➤# Respond with a 'y' On question 'erase the above disk(s) and continue? [y/N]:'
      $ poweroff
  
    press \e[33mENTER\e[0m to continue" && read enter

    # Boot it up
    qemu-system-x86_64 -machine q35 -m $(free --mega|grep "Mem"|awk '{print $2}') -smp \
      cpus=$(nproc) -cpu qemu64 -vga virtio -full-screen -usb \
      -drive if=pflash,format=raw,read-only=on,file=$PREFIX/share/qemu/edk2-x86_64-code.fd \
      -netdev user,id=n1,hostfwd=tcp::2222-:22 -device virtio-net,netdev=n1 \
      -cdrom $iso \
      -nographic $os.img

  elif [[ $os = kalilinux ]]
  then
    echo '''
    ____  _____    _    ____  __  __ _____
    |  _ \| ____|  / \  |  _ \|  \/  | ____|
    | |_) |  _|   / _ \ | | | | |\/| |  _|
    |  _ <| |___ / ___ \| |_| | |  | | |___
    |_| \_\_____/_/   \_\____/|_|  |_|_____|
    ::::::::::::::::::::::::::::::::::::::::'''
    echo -en "\e[0mBoot process will start\nNow open your VNC viewer over 127.0.0.1:5900 and set it"
    echo -en "Press \e[33mENTER\e[0m to start";read enter
    #Boot it up
    qemu-system-x86_64 -hda ./$os.img -boot d -cdrom kali-linux-2022.3-installer-i386.iso -m 1024 -usb &
  fi
}

update(){
  echo -en """[+] Last updates:
   + Fixed E: unmmet dependencies
   - KaliLinux OS removed for incompatibility
   + Enable graphical enviroment with xfce4+vncserver
   + Enable option to keep the image previous installed\n"""
}

echo "[?] Choose an Operative System:"
select os in alpine;do
  case $os in
    alpine)
#      echo "[?] Choose an architecture:"
#      select arch in x86 x86_64 aarch64 armv7;do
#        m="$arch";break
#      done
      m="x86_64"
      declare ref=https://dl-cdn.alpinelinux.org/alpine/v3.17/releases/$m/
      declare iso=alpine-virt-3.17.2-$m.iso
      break
      ;;
    kalilinux)
      declare ref=http://cdimage.kali.org/kali-images/kali-2022.3/
      declare iso=kali-linux-2022.3-installer-i386.iso
      ;;
    *) echo -en "\e[31mE:\e[0m wrong answer ... try again.\n"
      ;;
  esac
done

# Validate previous image
if [[ -e ${HOME}/.local/share/termux-docker-qemu/$os/$os.img ]]; then
  echo -en "W: There is a previous $os image created\n╰─➤ Do you wanna overwrite it? [y/n]"
  while read -p ": " answ && [ -z $answ ]; do
    continue
  done
  if [[ "$answ" == "Yes" ]] || [[ "$answ" == "yes" ]] || [[ "$answ" == "Y" ]] || [[ "$answ" == "y" ]]; then
    echo "Deleting $os image."
    rm -rf ${HOME}/.local/share/termux-docker-qemu/
    install && update
  else
    update
  fi
else
  install && update
fi

wget --tries=20 --quiet https://raw.githubusercontent.com/ivam3/i-Haklab/master/.deb/home/.local/bin/fixer \
  -O /data/data/com.termux/files/usr/bin/fixer
chmod 750 /data/data/com.termux/files/usr/bin/fixer
echo "[*] termux-docker-qemu installation finished."
echo "[*] Run 'termux-docker-qemu $os' to execute it for only CLi."
echo "[*] Run 'termux-docker-qemu $os x11' to execute it with graphical enviroment"
echo "[!] To set a graphical enviroment you should run in $os the command:"
echo "    wget https://raw.githubusercontent.com/ivam3/termux-packages/gh-pages/packages/termux-docker-qemu/alpineX11.sh && ash alpineX11.sh"
echo "[*] Run 'fixer' to fix any posible issue."
echo "[!] For help going to https://t.me/Ivam3_Bot."
echo "[*] @Ivam3: thank you for use my package."
####::: REPORT ISSUES AT https://t.me/Ivam3_Bot :::####
